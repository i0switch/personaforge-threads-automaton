import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { postContent } = await req.json()

    if (!postContent) {
      return new Response(
        JSON.stringify({ error: 'Post content is required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY is not set')
    }

    console.log('Generating image prompt for post:', postContent)

    const prompt = `以下の投稿内容を分析して、写真的な画像生成プロンプトを英語で作成してください：

"${postContent}"

要件：
1. 投稿の時間帯・場所・状況を正確に反映すること
2. 投稿内容に含まれる具体的な要素（カフェ、朝、仕事、アプリ等）を含めること  
3. 50トークン以内で簡潔に
4. カンマ区切りで構成
5. 写真的表現を含める（photograph, professional photo等）
6. 適切な照明・背景・ポーズを指定

例：
- 朝活・カフェ → morning light, cafe setting, coffee
- 夜・都市 → evening, city lights, urban
- 仕事・PC → working, laptop, business casual

システム固定プロンプト（追加不要）:
(masterpiece:1.2), best quality, high quality, 8k, high resolution, photorealistic, realistic, super detail, RAW photo, film grain, cinematic lighting, textured skin

回答は生成プロンプトのみ出力してください。`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Gemini API request failed: ${response.status} ${response.statusText}. Response: ${errorText}`)
    }

    const data = await response.json()
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('No content generated by Gemini API')
    }

    const generatedPrompt = data.candidates[0].content.parts[0].text.trim()
    
    console.log('Generated prompt:', generatedPrompt)

    return new Response(
      JSON.stringify({ 
        success: true,
        imagePrompt: generatedPrompt
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error generating image prompt:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Failed to generate image prompt',
        details: error.message 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})