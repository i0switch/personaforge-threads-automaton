import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { postContent } = await req.json()

    if (!postContent) {
      return new Response(
        JSON.stringify({ error: 'Post content is required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY is not set')
    }

    console.log('Generating image prompt for post:', postContent)

    const prompt = `"${postContent}"
上記のポスト文章に合う、自撮り風プロンプトを５０トークン以内で生成してください。

使用しているモデルはSD1.5 RealBeautyMix https://civitai.com/models/85156/realbeautymixです。
ベースモデル: RealBeautyMix (Civitaiからダウンロード)
人物固定技術: IP-Adapter-FaceID-PlusV2

必須キーワード：Beautiful woman（美しい女性）、Japanese actress（日本人女優）、incredibly detailed face/eye（極めて詳細な顔・瞳）、focus on face（顔にフォーカス）、best quality/high quality/masterpiece（高品質）、4K、ultra detailed、RAW photo、ultra high res、depth of field（被写界深度）

構文ポイント：カンマで区切りつつ、写真的表現（photograph, professional photograph）、照明・背景（Bokeh, city night, diffused light）などを追加し、特定の服装・ポーズ（例：off shoulder dress, swimsuit）を明示する

投稿内容に応じて適切な服装、背景、シチュエーションを選択し、魅力的な女性のポートレート写真になるようなプロンプトを５０トークン以内で英語で生成してください。投稿内容の雰囲気に合うプロンプトのみを返答してください。説明文は不要です。

下記プロンプトはシステムですでに設定されている固定プロンプトのため不要です。
(masterpiece:1.2)
best quality
high quality
8k
high resolution
photorealistic
realistic
super detail
RAW photo
film grain
cinematic lighting
textured skin`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Gemini API request failed: ${response.status} ${response.statusText}. Response: ${errorText}`)
    }

    const data = await response.json()
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('No content generated by Gemini API')
    }

    const generatedPrompt = data.candidates[0].content.parts[0].text.trim()
    
    console.log('Generated prompt:', generatedPrompt)

    return new Response(
      JSON.stringify({ 
        success: true,
        imagePrompt: generatedPrompt
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error generating image prompt:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Failed to generate image prompt',
        details: error.message 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})