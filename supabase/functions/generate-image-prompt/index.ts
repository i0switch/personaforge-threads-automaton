
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { postContent } = await req.json()

    if (!postContent) {
      return new Response(
        JSON.stringify({ error: 'Post content is required' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    const geminiApiKey = Deno.env.get('GEMINI_API_KEY')
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY is not set')
    }

    console.log('Generating image prompt for post:', postContent)

    const prompt = `【命令】

次の Twitter 投稿内容を分析し、投稿者本人がスマホのフロントカメラで自撮りした写真をBRAv7で生成するための**英語プロンプト**を出力せよ。

投稿内容：
"${postContent}"

【出力仕様】
Positive prompt
カンマ区切り・改行以外の余計な文字は不要
Compelを使用するためトークン数は気にしなくてよい

【Positiveの雛形】
Cinematic photo, (best quality:1.1), ultra-realistic, photorealistic of [DESCRIPTORS], natural skin texture, bokeh, standing, front view, full body shot, Canon EOS R5, 85 mm, f/1.4, ISO 200, 1/160 s, RAW

【[DESCRIPTORS] 生成ルール】
- 先頭に**selfie**を必ず置く
- 人物属性 → 行動／小物 → 場所 → 時間帯 → 照明 → ポーズ → カメラ語句
- 例）
  selfie, young app developer, checking analytics on laptop, rooftop cafe in Shibuya, golden hour glow, relaxed smile, smartphone front camera ƒ/1.8

回答は生成プロンプトのみ出力してください。`

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      })
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`Gemini API request failed: ${response.status} ${response.statusText}. Response: ${errorText}`)
    }

    const data = await response.json()
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('No content generated by Gemini API')
    }

    const generatedPrompt = data.candidates[0].content.parts[0].text.trim()
    
    console.log('Generated prompt:', generatedPrompt)

    return new Response(
      JSON.stringify({ 
        success: true,
        imagePrompt: generatedPrompt
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('Error generating image prompt:', error)
    return new Response(
      JSON.stringify({ 
        error: 'Failed to generate image prompt',
        details: error.message 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})
