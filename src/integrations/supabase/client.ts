
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Direct configuration (recommended for Lovable)
const supabaseConfig = {
  url: 'https://tqcgbsnoiarnawnppwia.supabase.co',
  anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRxY2dic25vaWFybmF3bnBwd2lhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5MTUxODEsImV4cCI6MjA2NTQ5MTE4MX0.5_mXobtncEbIHyigC_EqP-z1cr7AWYepR7L2CZwjBvI'
};

// iOS Safari対応の安全なストレージラッパー
const createSafeStorage = () => {
  // iOS Safari特有の問題を検出
  const isIOSSafari = /iPad|iPhone|iPod/.test(navigator.userAgent) && 
                     /WebKit/.test(navigator.userAgent) && 
                     !/CriOS|FxiOS|OPiOS|mercury/.test(navigator.userAgent);
  
  try {
    // より安全なlocalStorageテスト
    if (typeof window === 'undefined' || !window.localStorage) {
      throw new Error('localStorage not available');
    }
    
    const testKey = '__supabase_test__';
    window.localStorage.setItem(testKey, '1');
    const testValue = window.localStorage.getItem(testKey);
    window.localStorage.removeItem(testKey);
    
    if (testValue !== '1') {
      throw new Error('localStorage test failed');
    }
    
    // iOS Safariの場合、追加チェック
    if (isIOSSafari) {
      // プライベートブラウジングモードでは quota exceeded エラーになる
      try {
        const testData = 'x'.repeat(1024); // 1KB テストデータ
        window.localStorage.setItem('__ios_quota_test__', testData);
        window.localStorage.removeItem('__ios_quota_test__');
      } catch (quotaError) {
        console.warn('iOS Safari プライベートモード または quota制限検出、メモリストレージを使用');
        throw new Error('iOS Storage quota exceeded');
      }
    }
    
    return window.localStorage;
  } catch (error) {
    console.warn('localStorage使用不可、メモリストレージを使用:', error);
    const memoryStore = new Map<string, string>();
    
    // メモリストレージ実装を改善
    const memoryStorage = {
      getItem: (key: string) => {
        try {
          return memoryStore.get(key) ?? null;
        } catch {
          return null;
        }
      },
      setItem: (key: string, value: string) => {
        try {
          memoryStore.set(key, value);
        } catch (e) {
          console.warn('Memory storage setItem failed:', e);
        }
      },
      removeItem: (key: string) => {
        try {
          memoryStore.delete(key);
        } catch (e) {
          console.warn('Memory storage removeItem failed:', e);
        }
      },
      clear: () => {
        try {
          memoryStore.clear();
        } catch (e) {
          console.warn('Memory storage clear failed:', e);
        }
      },
      key: (_index: number) => null,
      length: memoryStore.size,
    } as unknown as Storage;
    
    return memoryStorage;
  }
};

const safeStorage = createSafeStorage();

// Configure Supabase client with proper auth settings
export const supabase = createClient<Database>(
  supabaseConfig.url,
  supabaseConfig.anonKey,
  {
    auth: {
      storage: safeStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true
    }
  }
  );

  // Fully disable Supabase Realtime globally to comply with strict CSP (no WebSockets allowed)
  try {
    const noop = () => {};
    const stubChannel = () => {
      const stub: any = {
        on: () => stub,
        subscribe: () => stub,
        unsubscribe: () => {},
      };
      return stub;
    };
    // Override realtime interfaces to avoid any WebSocket usage
    // @ts-ignore
    (supabase as any).channel = stubChannel;
    // @ts-ignore
    (supabase as any).removeChannel = noop;
    // @ts-ignore
    (supabase as any).realtime = {
      channel: stubChannel,
      setAuth: noop,
      connect: noop,
      remove: noop,
      removeChannel: noop,
    };
    console.warn('Supabase Realtime globally disabled to avoid CSP/WebSocket issues.');
  } catch {}

  // Log configuration status (development only)
  if (import.meta.env.DEV) {
  console.log('Supabase client configured successfully');
  console.log('Project URL:', supabaseConfig.url);
  console.log('Auth storage:', safeStorage === window.localStorage ? 'localStorage' : 'in-memory');
}
